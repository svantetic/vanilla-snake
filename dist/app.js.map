{"version":3,"sources":["app.js"],"names":["config","randomDotsColor","backgroundColor","snakeColor","snakeLength","snakeDirection","fps","BaseCanvas","selector","canvas","document","querySelector","ctx","getContext","HUDCanvas","gameWidth","gameHeight","fontWidthOffset","fontFamily","fontSize","score","hudText","font","fillStyle","fillText","clearRect","textToSet","PointCanvas","randomDotPosition","x","Math","round","random","width","y","height","fillRect","GameCanvas","dotsOnField","snake","clear","initEventListeners","Block","color","Snake","hudCanvas","body","bodyColor","blocksNumber","direction","alive","scorePointPosition","self","window","addEventListener","k","keyPressed","key","changeDirection","push","newDirection","canChangeDirection","oldDirection","shift","getLastBlockPosition","length","canvasToDraw","blockNumber","setText","canvasWidth","canvasHeight","die","pointCanvas","generateNewRandomDot","incrementScore","i","gameCanvas","init","gameOver","draw","setTimeout","requestAnimationFrame","move","checkCollisionWithItself","checkIfScored","checkIfInsideCanvas","isAlive"],"mappings":"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","file":"app.js","sourcesContent":["const config = {\r\n\trandomDotsColor: 'red',\r\n\tbackgroundColor: 'black',\r\n\tsnakeColor: 'white',\r\n\tsnakeLength: 6,\r\n\tsnakeDirection: 'right',\r\n\tfps: 15\r\n};\r\n\r\nclass BaseCanvas {\r\n\tconstructor(selector) {\r\n\t\tthis.canvas = document.querySelector(selector);\r\n\t\tthis.ctx = this.canvas.getContext('2d');\r\n\t}\r\n}\r\n\r\nclass HUDCanvas extends BaseCanvas {\r\n\tconstructor(selector, gameWidth, gameHeight) {\r\n\t\tsuper(selector);\r\n\t\tthis.gameWidth = gameWidth;\r\n\t\tthis.gameHeight = gameHeight;\r\n\t\tthis.fontWidthOffset = -150;\r\n\t\tthis.fontFamily = 'Helvetica';\r\n\t\tthis.fontSize = '24px';\r\n\t\tthis.score = 0;\r\n\t}\r\n\r\n\tinit(hudText) {\r\n\t\tthis.ctx.font = `${this.fontSize} ${this.fontFamily}`;\r\n\t\tthis.ctx.fillStyle = 'white';\r\n\t\tthis.ctx.fillText(`Score ${this.score}`, this.gameWidth + this.fontWidthOffset, 35);\r\n\t}\r\n\r\n\tincrementScore() {\r\n\t\tthis.score++;\r\n\t\tthis.ctx.clearRect(0, 0, this.gameWidth, this.gameHeight);\r\n\t\tthis.ctx.fillText(`Score ${this.score}`, this.gameWidth + this.fontWidthOffset, 35);\r\n\t}\r\n\r\n\tsetText(textToSet) {\r\n        this.ctx.clearRect(0, 0, this.gameWidth, this.gameHeight);\r\n        this.ctx.fillText(`${textToSet}`, this.gameWidth + this.fontWidthOffset, 35);\r\n\t}\r\n}\r\n\r\nclass PointCanvas extends BaseCanvas {\r\n\tconstructor(selector) {\r\n\t\tsuper(selector);\r\n\t\tthis.randomDotPosition = {};\r\n\t\tthis.randomDotsColor = config.randomDotsColor;\r\n\t\tthis.backgroundColor = 'rgba(0,0,0,0)';\r\n\t}\r\n\r\n\tgenerateNewRandomDot() {\r\n\r\n\t\tthis.randomDotPosition.x = (Math.round(Math.random() * this.canvas.width / 10) * 10);\r\n\t\tthis.randomDotPosition.y = (Math.round(Math.random() * this.canvas.height / 10) * 10);\r\n\t\tthis.ctx.fillStyle = this.randomDotsColor;\r\n\t\tthis.ctx.fillRect(this.randomDotPosition.x, this.randomDotPosition.y, 10, 10);\r\n\r\n\t}\r\n\r\n\tclear() {\r\n\t\tthis.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n\t}\r\n\r\n}\r\n\r\nclass GameCanvas extends BaseCanvas{\r\n\tconstructor(selector) {\r\n\t\tsuper(selector);\r\n\t\tthis.dotsOnField = [];\r\n\t\tthis.backgroundColor = config.backgroundColor;\r\n\t}\r\n\r\n\tinit(snake) {\r\n\t\tthis.clear();\r\n\t\tsnake.initEventListeners();\r\n\t}\r\n\t\r\n\tclear() {\r\n\t\tthis.ctx.fillStyle = this.backgroundColor;\r\n\t\tthis.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n\t}\r\n\r\n\t\r\n}\r\n\r\nclass Block {\r\n\tconstructor(x, y, width, height, color) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t\tthis.color = color;\r\n\t}\r\n}\r\n\r\nclass Snake {\r\n\tconstructor(hudCanvas) {\r\n\t\tthis.body = [];\r\n\t\tthis.bodyColor = config.snakeColor;\r\n\t\tthis.blocksNumber = config.snakeLength;\r\n\t\tthis.direction = config.snakeDirection;\r\n\t\tthis.alive = true;\r\n\t\tthis.scorePointPosition = {};\r\n\t\tthis.hudCanvas = hudCanvas;\r\n\t}\r\n\r\n\r\n\tinitEventListeners() {\r\n\t\tvar self = this;\r\n\t\twindow.addEventListener(\"keypress\", function(k) {\r\n\t\t\tlet keyPressed = k.key;\r\n\t\t\tswitch (keyPressed) {\r\n\t\t\t\tcase 'a': \r\n\t\t\t\t\tself.changeDirection('left');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'w':\r\n\t\t\t\t\tself.changeDirection('up');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 'd':\r\n\t\t\t\t\tself.changeDirection('right');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 's':\r\n\t\t\t\t\tself.changeDirection('down');\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}, false);\r\n\t}\r\n\tinit() {\r\n\t\tfor (let x = 0; x < this.blocksNumber; x++) {\r\n\t\t\tthis.body.push(new Block(50 + x * 10, 50, 10, 10, this.bodyColor));\r\n\t\t}\r\n\t}\r\n\tgetHeadPosition() {\r\n\t\treturn {\r\n\t\t\tx: this.body[0].x,\r\n\t\t\ty: this.body[0].y\r\n\t\t}\r\n\t}\r\n\tchangeDirection(newDirection) {\r\n\t\tif (this.canChangeDirection(this.direction, newDirection)) {\r\n\t\t\t\tthis.direction = newDirection;\r\n\t\t}\r\n\t}\r\n\r\n\tcanChangeDirection(oldDirection, newDirection) {\r\n\t\treturn !(oldDirection === 'up' && newDirection === 'down'\r\n\t\t\t|| oldDirection == 'down' && newDirection == 'up'\r\n\t\t\t|| oldDirection == 'left' && newDirection == 'right'\r\n\t\t\t|| oldDirection == 'right' && newDirection == 'left');\r\n\t}\r\n\tmove() {\r\n\t\tlet self = this;\r\n\t\tself.body.shift();\r\n\t\tswitch (this.direction) {\r\n\t\t\tcase 'up':\r\n\t\t\tself.body.push(new Block(this.getLastBlockPosition().x, this.getLastBlockPosition().y - 10, 10, 10, this.bodyColor));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'left':\r\n\t\t\tself.body.push(new Block(this.getLastBlockPosition().x - 10, this.getLastBlockPosition().y, 10, 10, this.bodyColor));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'right':\r\n\t\t\tself.body.push(new Block(this.getLastBlockPosition().x + 10, this.getLastBlockPosition().y, 10, 10, this.bodyColor));\r\n\t\t\t\tbreak;\r\n\t\t\tcase 'down':\r\n\t\t\tself.body.push(new Block(this.getLastBlockPosition().x, this.getLastBlockPosition().y + 10, 10, 10, this.bodyColor));\r\n\t\t\t\tbreak;\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\tgetLastBlockPosition() {\r\n\t\treturn {\r\n\t\t\t\t\tx: this.body[this.body.length - 1].x,\r\n\t\t\t\t\ty: this.body[this.body.length - 1].y\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\tdraw(canvasToDraw) {\r\n\t\tfor (var blockNumber in this.body) {\r\n\t\t\tcanvasToDraw.ctx.fillStyle = this.body[blockNumber].color;\r\n\t\t\tcanvasToDraw.ctx.fillRect(this.body[blockNumber].x, this.body[blockNumber].y,\r\n\t\t\t\tthis.body[blockNumber].width, this.body[blockNumber].height);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\tisAlive() {\r\n\t\treturn this.alive;\r\n\t}\r\n\r\n\tdie() {\r\n\t\tthis.alive = false;\r\n\t\tthis.hudCanvas.setText(\"Game Over!\");\r\n\t}\r\n\r\n\tcheckIfInsideCanvas(canvasWidth, canvasHeight) {\r\n\t\tif (canvasWidth <= this.getLastBlockPosition().x ||\r\n\t\t\tcanvasHeight <= this.getLastBlockPosition().y ||\r\n\t\t\t0 >= this.getLastBlockPosition().x ||\r\n\t\t\t0 >= this.getLastBlockPosition().y) {\r\n\t\t\tthis.die();\r\n\t\t\t\r\n\t\t}\r\n\t}\r\n\r\n\tcheckIfScored(pointCanvas) {\r\n\r\n\t\tif (this.getLastBlockPosition().x == pointCanvas.randomDotPosition.x &&\r\n\t\t\tthis.getLastBlockPosition().y == pointCanvas.randomDotPosition.y) {\r\n\t\t\tthis.body.push(new Block(pointCanvas.randomDotPosition.x, pointCanvas.randomDotPosition.y, this.bodyColor));\r\n\t\t\tpointCanvas.clear();\r\n\t\t\tpointCanvas.generateNewRandomDot();\r\n\t\t\tthis.hudCanvas.incrementScore();\r\n\t\t}\r\n\t}\r\n\r\n\tcheckCollisionWithItself() {\r\n\t\tlet self = this;\r\n\t\tfor (let i = 0; i < this.body.length - 1; i++)\r\n\t\t\tif (self.getLastBlockPosition().x == this.body[i].x && self.getLastBlockPosition().y == this.body[i].y) {\r\n\t\t\t\tself.die();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\nconst gameCanvas = new GameCanvas('#game-canvas');\r\nconst pointCanvas = new PointCanvas('#point-canvas');\r\nconst hudCanvas = new HUDCanvas('#hud-canvas', gameCanvas.canvas.width, gameCanvas.canvas.height);\r\nconst snake = new Snake(hudCanvas);\r\n\r\nhudCanvas.init('Score');\r\ngameCanvas.init(snake);\r\nsnake.init();\r\n\r\npointCanvas.generateNewRandomDot();\r\n\r\nlet gameOver = false;\r\nfunction draw() {\r\n    setTimeout(function() {\r\n    \tif (!gameOver) {\r\n\t\t\trequestAnimationFrame(draw);\r\n\t\t\tgameCanvas.clear();\r\n\t\t\tsnake.move();\r\n\t\t\tsnake.checkCollisionWithItself();\r\n            snake.checkIfScored(pointCanvas);\r\n            snake.checkIfInsideCanvas(gameCanvas.canvas.width, gameCanvas.canvas.height);\r\n            snake.draw(gameCanvas);\r\n            gameOver = !snake.isAlive();\r\n\t\t}\r\n    }, 1000 / config.fps);\r\n   }\r\ndraw();\r\n"]}